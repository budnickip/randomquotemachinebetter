{"version":3,"sources":["components/RandomText/index.js","components/Button/index.js","duck/types.js","duck/reducer.js","duck/actions.js","containers/QuoteBox/index.js","App.js","serviceWorker.js","store.js","index.js"],"names":["RandomText","console","log","this","props","color","id","className","quote","author","Component","Button","href","onClick","click","text","initialState","quotes","state","action","type","types","store","createStore","composeWithDevTools","window","QuoteBox","colors","displayed","random","event","length","setState","Math","floor","document","documentElement","style","setProperty","preventDefault","add","previous","fetch","then","res","json","result","connect","dispatch","actions","App","Boolean","location","hostname","match","reducer","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9f219ae9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './index.css'\r\n\r\nclass RandomText extends Component{\r\n    render(){\r\n\r\n        console.log(this.props.color)\r\n        return(\r\n            <div id=\"text\">\r\n                <p className=\"quote-text\">{this.props.quote.quote}</p>\r\n                <p className=\"quote-author\">{this.props.quote.author}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RandomText","import React, { Component } from 'react';\r\nimport './index.scss'\r\n\r\nclass Button extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"buttons\"> \r\n                <a className=\"buttons__quote\" href=\"#\">tweet-quote</a>\r\n                <button className=\"buttons__new-quote\" onClick={this.props.click}>{this.props.text}</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button","const ADD = 'ADD'\r\nconst RESET = 'RESET'\r\n\r\nexport default {\r\n    ADD,\r\n    RESET\r\n}","import {createStore} from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport types from './types'\r\n\r\nconst initialState = {\r\n  quotes: [{\"quote\": \"An unexamined life is not worth living.\", \"author\": \"Socrates\"},\r\n  {\"quote\": \"Eighty percent of success is showing up.\", \"author\": \"Woody Allen\"}]\r\n  \r\n}\r\n\r\nfunction quotes(state = initialState, action) {\r\n  switch(action.type) {\r\n    case types.ADD:\r\n      return{\r\n        ...state, quotes: [...state.quotes, action.quote]\r\n      }\r\n    case types.RESET:\r\n      return{\r\n        ...state, quotes: []\r\n      }\r\n    default: \r\n      return state\r\n  }\r\n}\r\n\r\n\r\n\r\nconst store = createStore(quotes, composeWithDevTools())\r\nwindow.store = store\r\n\r\nexport default {quotes}","import types from './types'\r\n\r\nconst add = quote => ({type: types.ADD, quote})\r\nconst reset = () => ({type: types.RESET})\r\n\r\nexport default{\r\n    add,\r\n    reset\r\n}","import React, { Component } from 'react';\r\nimport styled from 'styled-components'\r\nimport './index.css'\r\nimport RandomText from '../../components/RandomText'\r\nimport Button from '../../components/Button'\r\n\r\nimport { connect } from 'react-redux';\r\nimport reducer from '../../duck/reducer'\r\nimport actions from '../../duck/actions'\r\n\r\nclass QuoteBox extends Component{\r\n\r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n\r\n    state = {\r\n         quotes: [],\r\n         quote: {},\r\n         colors:['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', \"#472E32\", \"#BDBB99\", \"#77B1A9\", \"#73A857\", \"#474699\", \"#78FE3F\", \"#023424\", \"#A55922\"],\r\n         color: '',\r\n         displayed: 1\r\n    }\r\n\r\n    random = (event) => {\r\n        if(this.state.displayed == this.props.quotes.length-1){\r\n          this.setState({\r\n            displayed: this.state.displayed+1,\r\n            quote: this.state.quotes[Math.floor(Math.random() * ( this.state.quotes.length -1)) + 1],\r\n            color: this.state.colors[Math.floor(Math.random() * (this.state.colors.length-1)) + 1]\r\n        })\r\n        document.documentElement.style\r\n        .setProperty('--change-color', this.state.color);\r\n        event.preventDefault()\r\n        this.props.add(this.state.quote)\r\n        }else{\r\n          this.setState({\r\n            quote: this.props.quotes[this.state.displayed],\r\n            displayed: this.state.displayed +1\r\n          })\r\n        }\r\n    }\r\n\r\n    previous = () => {\r\n        this.setState({\r\n          quote: this.props.quotes[this.state.displayed],\r\n          displayed: this.state.displayed - 1\r\n        })\r\n    }\r\n  \r\n    componentDidMount() {\r\n      fetch(\"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\")\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            this.setState({\r\n              quotes: result,\r\n              quote: result[Math.floor(Math.random() * ( result.length -1)) + 1]\r\n            });\r\n            this.props.add(this.state.quote)\r\n            this.setState({\r\n              displayed: this.state.displayed +1\r\n            })\r\n          })\r\n    }\r\n    render(){\r\n      return(\r\n        <div id=\"quote-box\" className=\"quote-box\">\r\n            <RandomText quote={this.state.quote} />\r\n            <Button click={this.random} text=\"Nex Quote\" />\r\n            <Button click={this.previous} text=\"Previous Quote\" />\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  add: quote => dispatch(actions.add(quote))\r\n})\r\n\r\nconst mapStateToProps = state => ({\r\n  quotes: state.quotes\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuoteBox)","import React, { Component } from 'react';\nimport './App.css';\nimport QuoteBox from './containers/QuoteBox'\n\n//import Test from './components/Test'\n\n//na koniec, rozbuduj to o reduxa - dodaj przycisk wcześniejszy cytat\n//cytaty które już się pojawiły, zapisuj do state w reduxie i dzięki temu cofaj po tablicy za pomocą reduxa\n//reasumując - użytkownik będzie losował nowe cytaty, ale będzie też mógł powrócić do poprzednich, a następnie znów przejść do ostatniego\n\n//console.log(initialState.quotes[1])\n\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <QuoteBox />\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport reducer from './duck/reducer'\r\n\r\nconst store = createStore(reducer.quotes, composeWithDevTools())\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport store from './store'\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}